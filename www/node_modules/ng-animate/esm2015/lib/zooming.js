/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { animation, style, animate, keyframes } from '@angular/animations';
import { DEFAULT_TIMING } from './utils';
export const /** @type {?} */ zoomIn = animation([
    animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            opacity: 0,
            transform: 'scale3d(.3, .3, .3)',
            offset: 0
        }),
        style({
            opacity: 1,
            transform: 'scale3d(1, 1, 1)',
            offset: 0.5
        })
    ]))
], {
    params: { timing: DEFAULT_TIMING, delay: 0 }
});
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function zoomInY(a, b) {
    return animation(animate('{{ timing }}s {{ delay }}s cubic-bezier(0.550, 0.055, 0.675, 0.190)', keyframes([
        style({
            opacity: 0,
            transform: `scale3d(.1, .1, .1) translate3d(0, {{ a }}, 0)`,
            offset: 0
        }),
        style({
            opacity: 1,
            transform: `scale3d(.475, .475, .475) translate3d(0, {{ b }}, 0)`,
            offset: 0.6
        })
    ])), { params: { timing: DEFAULT_TIMING, delay: 0, a, b } });
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function zoomInX(a, b) {
    return animation(animate('{{ timing }}s {{ delay }}s cubic-bezier(0.550, 0.055, 0.675, 0.190)', keyframes([
        style({
            opacity: 0,
            transform: `scale3d(.1, .1, .1) translate3d({{ a }}, 0, 0)`,
            offset: 0
        }),
        style({
            opacity: 1,
            transform: `scale3d(.475, .475, .475) translate3d({{ b }}, 0, 0)`,
            offset: 0.6
        })
    ])), { params: { timing: DEFAULT_TIMING, delay: 0, a, b } });
}
export const /** @type {?} */ zoomInDown = zoomInY('-1000px', '10px');
export const /** @type {?} */ zoomInUp = zoomInY('1000px', '-10px');
export const /** @type {?} */ zoomInLeft = zoomInX('-1000px', '10px');
export const /** @type {?} */ zoomInRight = zoomInX('1000px', '-10px');
export const /** @type {?} */ zoomOut = animation([
    animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            opacity: 1,
            offset: 0
        }),
        style({
            opacity: 0,
            transform: 'scale3d(.3, .3, .3)',
            offset: 0.5
        }),
        style({
            opacity: 0,
            offset: 1
        })
    ]))
], {
    params: { timing: DEFAULT_TIMING, delay: 0 }
});
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function zoomOutY(a, b) {
    return animation(animate('{{ timing }}s {{ delay }}s cubic-bezier(0.550, 0.055, 0.675, 0.190)', keyframes([
        style({
            opacity: 1,
            transform: `scale3d(.475, .475, .475) translate3d(0, {{ a }}, 0)`,
            offset: 0.4
        }),
        style({
            opacity: 0,
            transform: `scale3d(.1, .1, .1) translate3d(0, {{ b }}, 0)`,
            offset: 1
        })
    ])), { params: { timing: DEFAULT_TIMING, delay: 0, a, b } });
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function zoomOutX(a, b) {
    return animation(animate('{{ timing }}s {{ delay }}s cubic-bezier(0.550, 0.055, 0.675, 0.190)', keyframes([
        style({
            opacity: 1,
            transform: `scale3d(.475, .475, .475) translate3d({{ a }}, 0, 0)`,
            offset: 0.4
        }),
        style({
            opacity: 0,
            transform: `scale3d(.1, .1, .1) translate3d({{ b }}, 0, 0)`,
            offset: 1
        })
    ])), { params: { timing: DEFAULT_TIMING, delay: 0, a, b } });
}
export const /** @type {?} */ zoomOutDown = zoomOutY('-60px', '2000px');
export const /** @type {?} */ zoomOutUp = zoomOutY('60px', '-2000px');
export const /** @type {?} */ zoomOutLeft = zoomOutX('42px', '-2000px');
export const /** @type {?} */ zoomOutRight = zoomOutX('-42px', '2000px');

//# sourceMappingURL=data:application/json;base64,