/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { animation, style, animate, keyframes } from '@angular/animations';
import { DEFAULT_TIMING } from './utils';
/**
 * @param {?} origin
 * @param {?} degrees
 * @return {?}
 */
export function rotateInDirection(origin, degrees) {
    return animation(animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            'transform-origin': '{{ origin }}',
            opacity: 0,
            transform: 'rotate3d(0, 0, 1, {{ degrees }})',
            offset: 0
        }),
        style({
            'transform-origin': '{{ origin }}',
            opacity: 1,
            transform: 'none',
            offset: 1
        })
    ])), {
        params: { timing: DEFAULT_TIMING, delay: 0, origin, degrees }
    });
}
export const /** @type {?} */ rotateIn = rotateInDirection('center', '-200deg');
export const /** @type {?} */ rotateInDownLeft = rotateInDirection('left bottom', '-45deg');
export const /** @type {?} */ rotateInDownRight = rotateInDirection('right bottom', '45deg');
export const /** @type {?} */ rotateInUpLeft = rotateInDirection('left bottom', '45deg');
export const /** @type {?} */ rotateInUpRight = rotateInDirection('right bottom', '-90deg');
/**
 * @param {?} origin
 * @param {?} degrees
 * @return {?}
 */
export function rotateOutDirection(origin, degrees) {
    return animation(animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            'transform-origin': '{{ origin }}',
            opacity: 1,
            transform: 'none',
            offset: 0
        }),
        style({
            'transform-origin': '{{ origin }}',
            opacity: 0,
            transform: 'rotate3d(0, 0, 1, {{ degrees }})',
            offset: 1
        })
    ])), {
        params: { timing: DEFAULT_TIMING, delay: 0, origin, degrees }
    });
}
export const /** @type {?} */ rotateOut = rotateOutDirection('center', '200deg');
export const /** @type {?} */ rotateOutDownLeft = rotateOutDirection('left bottom', '45deg');
export const /** @type {?} */ rotateOutDownRight = rotateOutDirection('right bottom', '-45deg');
export const /** @type {?} */ rotateOutUpLeft = rotateOutDirection('left bottom', '-45deg');
export const /** @type {?} */ rotateOutUpRight = rotateOutDirection('right bottom', '90deg');

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm90YXRlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctYW5pbWF0ZS8iLCJzb3VyY2VzIjpbImxpYi9yb3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFFTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE9BQU8sRUFDUCxTQUFTLEVBQ1YsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sU0FBUyxDQUFDOzs7Ozs7QUFFekMsTUFBTSw0QkFBNEIsTUFBTSxFQUFFLE9BQU87SUFDL0MsTUFBTSxDQUFDLFNBQVMsQ0FDZCxPQUFPLENBQ0wsNEJBQTRCLEVBQzVCLFNBQVMsQ0FBQztRQUNSLEtBQUssQ0FBQztZQUNKLGtCQUFrQixFQUFFLGNBQWM7WUFDbEMsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsa0NBQWtDO1lBQzdDLE1BQU0sRUFBRSxDQUFDO1NBQ1YsQ0FBQztRQUNGLEtBQUssQ0FBQztZQUNKLGtCQUFrQixFQUFFLGNBQWM7WUFDbEMsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsTUFBTTtZQUNqQixNQUFNLEVBQUUsQ0FBQztTQUNWLENBQUM7S0FDSCxDQUFDLENBQ0gsRUFDRDtRQUNFLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFO0tBQzlELENBQ0YsQ0FBQztDQUNIO0FBRUQsTUFBTSxDQUFDLHVCQUFNLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDL0QsTUFBTSxDQUFDLHVCQUFNLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMzRSxNQUFNLENBQUMsdUJBQU0saUJBQWlCLEdBQUcsaUJBQWlCLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVFLE1BQU0sQ0FBQyx1QkFBTSxjQUFjLEdBQUcsaUJBQWlCLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hFLE1BQU0sQ0FBQyx1QkFBTSxlQUFlLEdBQUcsaUJBQWlCLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFDOzs7Ozs7QUFFM0UsTUFBTSw2QkFBNkIsTUFBTSxFQUFFLE9BQU87SUFDaEQsTUFBTSxDQUFDLFNBQVMsQ0FDZCxPQUFPLENBQ0wsNEJBQTRCLEVBQzVCLFNBQVMsQ0FBQztRQUNSLEtBQUssQ0FBQztZQUNKLGtCQUFrQixFQUFFLGNBQWM7WUFDbEMsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsTUFBTTtZQUNqQixNQUFNLEVBQUUsQ0FBQztTQUNWLENBQUM7UUFDRixLQUFLLENBQUM7WUFDSixrQkFBa0IsRUFBRSxjQUFjO1lBQ2xDLE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLGtDQUFrQztZQUM3QyxNQUFNLEVBQUUsQ0FBQztTQUNWLENBQUM7S0FDSCxDQUFDLENBQ0gsRUFDRDtRQUNFLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFO0tBQzlELENBQ0YsQ0FBQztDQUNIO0FBRUQsTUFBTSxDQUFDLHVCQUFNLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDaEUsTUFBTSxDQUFDLHVCQUFNLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM1RSxNQUFNLENBQUMsdUJBQU0sa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQy9FLE1BQU0sQ0FBQyx1QkFBTSxlQUFlLEdBQUcsa0JBQWtCLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzNFLE1BQU0sQ0FBQyx1QkFBTSxnQkFBZ0IsR0FBRyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSxcbiAgYW5pbWF0aW9uLFxuICBzdHlsZSxcbiAgYW5pbWF0ZSxcbiAga2V5ZnJhbWVzXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgREVGQVVMVF9USU1JTkcgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZUluRGlyZWN0aW9uKG9yaWdpbiwgZGVncmVlcykge1xuICByZXR1cm4gYW5pbWF0aW9uKFxuICAgIGFuaW1hdGUoXG4gICAgICAne3sgdGltaW5nIH19cyB7eyBkZWxheSB9fXMnLFxuICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzogJ3t7IG9yaWdpbiB9fScsXG4gICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGUzZCgwLCAwLCAxLCB7eyBkZWdyZWVzIH19KScsXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH0pLFxuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOiAne3sgb3JpZ2luIH19JyxcbiAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgIHRyYW5zZm9ybTogJ25vbmUnLFxuICAgICAgICAgIG9mZnNldDogMVxuICAgICAgICB9KVxuICAgICAgXSlcbiAgICApLFxuICAgIHtcbiAgICAgIHBhcmFtczogeyB0aW1pbmc6IERFRkFVTFRfVElNSU5HLCBkZWxheTogMCwgb3JpZ2luLCBkZWdyZWVzIH1cbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCByb3RhdGVJbiA9IHJvdGF0ZUluRGlyZWN0aW9uKCdjZW50ZXInLCAnLTIwMGRlZycpO1xuZXhwb3J0IGNvbnN0IHJvdGF0ZUluRG93bkxlZnQgPSByb3RhdGVJbkRpcmVjdGlvbignbGVmdCBib3R0b20nLCAnLTQ1ZGVnJyk7XG5leHBvcnQgY29uc3Qgcm90YXRlSW5Eb3duUmlnaHQgPSByb3RhdGVJbkRpcmVjdGlvbigncmlnaHQgYm90dG9tJywgJzQ1ZGVnJyk7XG5leHBvcnQgY29uc3Qgcm90YXRlSW5VcExlZnQgPSByb3RhdGVJbkRpcmVjdGlvbignbGVmdCBib3R0b20nLCAnNDVkZWcnKTtcbmV4cG9ydCBjb25zdCByb3RhdGVJblVwUmlnaHQgPSByb3RhdGVJbkRpcmVjdGlvbigncmlnaHQgYm90dG9tJywgJy05MGRlZycpO1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlT3V0RGlyZWN0aW9uKG9yaWdpbiwgZGVncmVlcykge1xuICByZXR1cm4gYW5pbWF0aW9uKFxuICAgIGFuaW1hdGUoXG4gICAgICAne3sgdGltaW5nIH19cyB7eyBkZWxheSB9fXMnLFxuICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzogJ3t7IG9yaWdpbiB9fScsXG4gICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICB0cmFuc2Zvcm06ICdub25lJyxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSksXG4gICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6ICd7eyBvcmlnaW4gfX0nLFxuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlM2QoMCwgMCwgMSwge3sgZGVncmVlcyB9fSknLFxuICAgICAgICAgIG9mZnNldDogMVxuICAgICAgICB9KVxuICAgICAgXSlcbiAgICApLFxuICAgIHtcbiAgICAgIHBhcmFtczogeyB0aW1pbmc6IERFRkFVTFRfVElNSU5HLCBkZWxheTogMCwgb3JpZ2luLCBkZWdyZWVzIH1cbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCByb3RhdGVPdXQgPSByb3RhdGVPdXREaXJlY3Rpb24oJ2NlbnRlcicsICcyMDBkZWcnKTtcbmV4cG9ydCBjb25zdCByb3RhdGVPdXREb3duTGVmdCA9IHJvdGF0ZU91dERpcmVjdGlvbignbGVmdCBib3R0b20nLCAnNDVkZWcnKTtcbmV4cG9ydCBjb25zdCByb3RhdGVPdXREb3duUmlnaHQgPSByb3RhdGVPdXREaXJlY3Rpb24oJ3JpZ2h0IGJvdHRvbScsICctNDVkZWcnKTtcbmV4cG9ydCBjb25zdCByb3RhdGVPdXRVcExlZnQgPSByb3RhdGVPdXREaXJlY3Rpb24oJ2xlZnQgYm90dG9tJywgJy00NWRlZycpO1xuZXhwb3J0IGNvbnN0IHJvdGF0ZU91dFVwUmlnaHQgPSByb3RhdGVPdXREaXJlY3Rpb24oJ3JpZ2h0IGJvdHRvbScsICc5MGRlZycpO1xuIl19