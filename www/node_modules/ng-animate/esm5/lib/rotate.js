/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { animation, style, animate, keyframes } from '@angular/animations';
import { DEFAULT_TIMING } from './utils';
/**
 * @param {?} origin
 * @param {?} degrees
 * @return {?}
 */
export function rotateInDirection(origin, degrees) {
    return animation(animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            'transform-origin': '{{ origin }}',
            opacity: 0,
            transform: 'rotate3d(0, 0, 1, {{ degrees }})',
            offset: 0
        }),
        style({
            'transform-origin': '{{ origin }}',
            opacity: 1,
            transform: 'none',
            offset: 1
        })
    ])), {
        params: { timing: DEFAULT_TIMING, delay: 0, origin: origin, degrees: degrees }
    });
}
export var /** @type {?} */ rotateIn = rotateInDirection('center', '-200deg');
export var /** @type {?} */ rotateInDownLeft = rotateInDirection('left bottom', '-45deg');
export var /** @type {?} */ rotateInDownRight = rotateInDirection('right bottom', '45deg');
export var /** @type {?} */ rotateInUpLeft = rotateInDirection('left bottom', '45deg');
export var /** @type {?} */ rotateInUpRight = rotateInDirection('right bottom', '-90deg');
/**
 * @param {?} origin
 * @param {?} degrees
 * @return {?}
 */
export function rotateOutDirection(origin, degrees) {
    return animation(animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            'transform-origin': '{{ origin }}',
            opacity: 1,
            transform: 'none',
            offset: 0
        }),
        style({
            'transform-origin': '{{ origin }}',
            opacity: 0,
            transform: 'rotate3d(0, 0, 1, {{ degrees }})',
            offset: 1
        })
    ])), {
        params: { timing: DEFAULT_TIMING, delay: 0, origin: origin, degrees: degrees }
    });
}
export var /** @type {?} */ rotateOut = rotateOutDirection('center', '200deg');
export var /** @type {?} */ rotateOutDownLeft = rotateOutDirection('left bottom', '45deg');
export var /** @type {?} */ rotateOutDownRight = rotateOutDirection('right bottom', '-45deg');
export var /** @type {?} */ rotateOutUpLeft = rotateOutDirection('left bottom', '-45deg');
export var /** @type {?} */ rotateOutUpRight = rotateOutDirection('right bottom', '90deg');

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm90YXRlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctYW5pbWF0ZS8iLCJzb3VyY2VzIjpbImxpYi9yb3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFFTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE9BQU8sRUFDUCxTQUFTLEVBQ1YsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sU0FBUyxDQUFDOzs7Ozs7QUFFekMsTUFBTSw0QkFBNEIsTUFBTSxFQUFFLE9BQU87SUFDL0MsTUFBTSxDQUFDLFNBQVMsQ0FDZCxPQUFPLENBQ0wsNEJBQTRCLEVBQzVCLFNBQVMsQ0FBQztRQUNSLEtBQUssQ0FBQztZQUNKLGtCQUFrQixFQUFFLGNBQWM7WUFDbEMsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsa0NBQWtDO1lBQzdDLE1BQU0sRUFBRSxDQUFDO1NBQ1YsQ0FBQztRQUNGLEtBQUssQ0FBQztZQUNKLGtCQUFrQixFQUFFLGNBQWM7WUFDbEMsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsTUFBTTtZQUNqQixNQUFNLEVBQUUsQ0FBQztTQUNWLENBQUM7S0FDSCxDQUFDLENBQ0gsRUFDRDtRQUNFLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLFFBQUEsRUFBRSxPQUFPLFNBQUEsRUFBRTtLQUM5RCxDQUNGLENBQUM7Q0FDSDtBQUVELE1BQU0sQ0FBQyxxQkFBTSxRQUFRLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9ELE1BQU0sQ0FBQyxxQkFBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDM0UsTUFBTSxDQUFDLHFCQUFNLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM1RSxNQUFNLENBQUMscUJBQU0sY0FBYyxHQUFHLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN4RSxNQUFNLENBQUMscUJBQU0sZUFBZSxHQUFHLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQzs7Ozs7O0FBRTNFLE1BQU0sNkJBQTZCLE1BQU0sRUFBRSxPQUFPO0lBQ2hELE1BQU0sQ0FBQyxTQUFTLENBQ2QsT0FBTyxDQUNMLDRCQUE0QixFQUM1QixTQUFTLENBQUM7UUFDUixLQUFLLENBQUM7WUFDSixrQkFBa0IsRUFBRSxjQUFjO1lBQ2xDLE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLE1BQU07WUFDakIsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0osa0JBQWtCLEVBQUUsY0FBYztZQUNsQyxPQUFPLEVBQUUsQ0FBQztZQUNWLFNBQVMsRUFBRSxrQ0FBa0M7WUFDN0MsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFDO0tBQ0gsQ0FBQyxDQUNILEVBQ0Q7UUFDRSxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxRQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUU7S0FDOUQsQ0FDRixDQUFDO0NBQ0g7QUFFRCxNQUFNLENBQUMscUJBQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNoRSxNQUFNLENBQUMscUJBQU0saUJBQWlCLEdBQUcsa0JBQWtCLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVFLE1BQU0sQ0FBQyxxQkFBTSxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLHFCQUFNLGVBQWUsR0FBRyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDM0UsTUFBTSxDQUFDLHFCQUFNLGdCQUFnQixHQUFHLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhLFxuICBhbmltYXRpb24sXG4gIHN0eWxlLFxuICBhbmltYXRlLFxuICBrZXlmcmFtZXNcbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBERUZBVUxUX1RJTUlORyB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlSW5EaXJlY3Rpb24ob3JpZ2luLCBkZWdyZWVzKSB7XG4gIHJldHVybiBhbmltYXRpb24oXG4gICAgYW5pbWF0ZShcbiAgICAgICd7eyB0aW1pbmcgfX1zIHt7IGRlbGF5IH19cycsXG4gICAgICBrZXlmcmFtZXMoW1xuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOiAne3sgb3JpZ2luIH19JyxcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZTNkKDAsIDAsIDEsIHt7IGRlZ3JlZXMgfX0pJyxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSksXG4gICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6ICd7eyBvcmlnaW4gfX0nLFxuICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgdHJhbnNmb3JtOiAnbm9uZScsXG4gICAgICAgICAgb2Zmc2V0OiAxXG4gICAgICAgIH0pXG4gICAgICBdKVxuICAgICksXG4gICAge1xuICAgICAgcGFyYW1zOiB7IHRpbWluZzogREVGQVVMVF9USU1JTkcsIGRlbGF5OiAwLCBvcmlnaW4sIGRlZ3JlZXMgfVxuICAgIH1cbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IHJvdGF0ZUluID0gcm90YXRlSW5EaXJlY3Rpb24oJ2NlbnRlcicsICctMjAwZGVnJyk7XG5leHBvcnQgY29uc3Qgcm90YXRlSW5Eb3duTGVmdCA9IHJvdGF0ZUluRGlyZWN0aW9uKCdsZWZ0IGJvdHRvbScsICctNDVkZWcnKTtcbmV4cG9ydCBjb25zdCByb3RhdGVJbkRvd25SaWdodCA9IHJvdGF0ZUluRGlyZWN0aW9uKCdyaWdodCBib3R0b20nLCAnNDVkZWcnKTtcbmV4cG9ydCBjb25zdCByb3RhdGVJblVwTGVmdCA9IHJvdGF0ZUluRGlyZWN0aW9uKCdsZWZ0IGJvdHRvbScsICc0NWRlZycpO1xuZXhwb3J0IGNvbnN0IHJvdGF0ZUluVXBSaWdodCA9IHJvdGF0ZUluRGlyZWN0aW9uKCdyaWdodCBib3R0b20nLCAnLTkwZGVnJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVPdXREaXJlY3Rpb24ob3JpZ2luLCBkZWdyZWVzKSB7XG4gIHJldHVybiBhbmltYXRpb24oXG4gICAgYW5pbWF0ZShcbiAgICAgICd7eyB0aW1pbmcgfX1zIHt7IGRlbGF5IH19cycsXG4gICAgICBrZXlmcmFtZXMoW1xuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOiAne3sgb3JpZ2luIH19JyxcbiAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgIHRyYW5zZm9ybTogJ25vbmUnLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9KSxcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzogJ3t7IG9yaWdpbiB9fScsXG4gICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGUzZCgwLCAwLCAxLCB7eyBkZWdyZWVzIH19KScsXG4gICAgICAgICAgb2Zmc2V0OiAxXG4gICAgICAgIH0pXG4gICAgICBdKVxuICAgICksXG4gICAge1xuICAgICAgcGFyYW1zOiB7IHRpbWluZzogREVGQVVMVF9USU1JTkcsIGRlbGF5OiAwLCBvcmlnaW4sIGRlZ3JlZXMgfVxuICAgIH1cbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IHJvdGF0ZU91dCA9IHJvdGF0ZU91dERpcmVjdGlvbignY2VudGVyJywgJzIwMGRlZycpO1xuZXhwb3J0IGNvbnN0IHJvdGF0ZU91dERvd25MZWZ0ID0gcm90YXRlT3V0RGlyZWN0aW9uKCdsZWZ0IGJvdHRvbScsICc0NWRlZycpO1xuZXhwb3J0IGNvbnN0IHJvdGF0ZU91dERvd25SaWdodCA9IHJvdGF0ZU91dERpcmVjdGlvbigncmlnaHQgYm90dG9tJywgJy00NWRlZycpO1xuZXhwb3J0IGNvbnN0IHJvdGF0ZU91dFVwTGVmdCA9IHJvdGF0ZU91dERpcmVjdGlvbignbGVmdCBib3R0b20nLCAnLTQ1ZGVnJyk7XG5leHBvcnQgY29uc3Qgcm90YXRlT3V0VXBSaWdodCA9IHJvdGF0ZU91dERpcmVjdGlvbigncmlnaHQgYm90dG9tJywgJzkwZGVnJyk7XG4iXX0=