/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { animation, style, animate, keyframes } from '@angular/animations';
import { DEFAULT_TIMING } from './utils';
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function fadeInX(a, b) {
    return animation(animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            opacity: 0,
            transform: 'translate3d({{ a }}, 0, 0)',
            offset: 0
        }),
        style({
            opacity: 1,
            transform: 'translate3d({{ b }}, 0, 0)',
            offset: 1
        })
    ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function fadeInY(a, b) {
    return animation(animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            opacity: 0,
            transform: 'translate3d(0, {{ a }}, 0)',
            offset: 0
        }),
        style({
            opacity: 1,
            transform: 'translate3d(0, {{ b }}, 0)',
            offset: 1
        })
    ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
}
export var /** @type {?} */ fadeIn = fadeInX(0, 0);
export var /** @type {?} */ fadeInDown = fadeInY('-100%', 0);
export var /** @type {?} */ fadeInUp = fadeInY('100%', 0);
export var /** @type {?} */ fadeInLeft = fadeInX('-100%', 0);
export var /** @type {?} */ fadeInRight = fadeInX('100%', 0);
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function fadeOutX(a, b) {
    return animation(animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            opacity: 1,
            transform: 'translate3d({{ a }}, 0, 0)',
            offset: 0
        }),
        style({
            opacity: 0,
            transform: 'translate3d({{ b }}, 0, 0)',
            offset: 1
        })
    ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function fadeOutY(a, b) {
    return animation(animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            opacity: 1,
            transform: 'translate3d(0, {{ a }}, 0)',
            offset: 0
        }),
        style({
            opacity: 0,
            transform: 'translate3d(0, {{ b }}, 0)',
            offset: 1
        })
    ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
}
export var /** @type {?} */ fadeOut = fadeOutX(0, 0);
export var /** @type {?} */ fadeOutDown = fadeOutY('-100%', 0);
export var /** @type {?} */ fadeOutUp = fadeOutY('100%', 0);
export var /** @type {?} */ fadeOutLeft = fadeOutX('-100%', 0);
export var /** @type {?} */ fadeOutRight = fadeOutX('100%', 0);
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function slideX(a, b) {
    return animation(animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            transform: 'translate3d({{ a }}, 0, 0)',
            offset: 0
        }),
        style({
            transform: 'translate3d({{ b }}, 0, 0)',
            offset: 1
        })
    ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function slideY(a, b) {
    return animation(animate('{{ timing }}s {{ delay }}s', keyframes([
        style({
            transform: 'translate3d(0, {{ a }}, 0)',
            offset: 0
        }),
        style({
            transform: 'translate3d(0, {{ b }}, 0)',
            offset: 1
        })
    ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
}
export var /** @type {?} */ slideInUp = slideY('-100%', 0);
export var /** @type {?} */ slideInDown = slideY('100%', 0);
export var /** @type {?} */ slideInLeft = slideX('-100%', 0);
export var /** @type {?} */ slideInRight = slideX('100%', 0);
export var /** @type {?} */ slideOutUp = slideY(0, '-100%');
export var /** @type {?} */ slideOutDown = slideY(0, '100%');
export var /** @type {?} */ slideOutLeft = slideX(0, '-100%');
export var /** @type {?} */ slideOutRight = slideX(0, '100%');

//# sourceMappingURL=data:application/json;base64,