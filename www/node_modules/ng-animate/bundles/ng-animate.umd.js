(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/animations')) :
    typeof define === 'function' && define.amd ? define('ng-animate', ['exports', '@angular/animations'], factory) :
    (factory((global['ng-animate'] = {}),global.ng.animations));
}(this, (function (exports,animations) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ DEFAULT_TIMING = 1;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ bounce = animations.animation([
        animations.style({ transform: 'translate3d(0, 0, 0)' }),
        animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({ transform: 'translate3d(0, 0, 0)', offset: 0.2 }),
            animations.style({ transform: 'translate3d(0, -30px, 0)', offset: 0.4 }),
            animations.style({ transform: 'translate3d(0, 0, 0)', offset: 0.53 }),
            animations.style({ transform: 'translate3d(0, -15px, 0)', offset: 0.7 }),
            animations.style({ transform: 'translate3d(0, -4px, 0)', offset: 0.9 }),
            animations.style({ transform: 'translate3d(0, 0, 0)', offset: 1 }),
        ])),
    ], { params: { timing: DEFAULT_TIMING, delay: 0 } });
    var /** @type {?} */ flash = animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
        animations.style({ opacity: 1 }),
        animations.style({ opacity: 0 }),
        animations.style({ opacity: 1 }),
        animations.style({ opacity: 0 }),
        animations.style({ opacity: 1 }),
    ])), { params: { timing: DEFAULT_TIMING, delay: 0 } });
    var /** @type {?} */ pulse = animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
        animations.style({ transform: 'scale3d(1, 1, 1)' }),
        animations.style({ transform: 'scale3d({{ scale }}, {{ scale }}, {{ scale }})' }),
        animations.style({ transform: 'scale3d(1, 1, 1)' }),
    ])), { params: { scale: 1.25, timing: DEFAULT_TIMING, delay: 0 } });
    var /** @type {?} */ rubberBand = animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
        animations.style({ transform: 'scale3d(1, 1, 1)', offset: 0 }),
        animations.style({ transform: 'scale3d(1.25, 0.75, 1)', offset: 0.3 }),
        animations.style({ transform: 'scale3d(0.75, 1.25, 1)', offset: 0.4 }),
        animations.style({ transform: 'scale3d(1.15, 0.85, 1)', offset: 0.5 }),
        animations.style({ transform: 'scale3d(.95, 1.05, 1)', offset: 0.65 }),
        animations.style({ transform: 'scale3d(1.05, .95, 1)', offset: 0.75 }),
        animations.style({ transform: 'scale3d(1, 1, 1)', offset: 1 }),
    ])), { params: { timing: DEFAULT_TIMING, delay: 0 } });
    var /** @type {?} */ shake = animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
        animations.style({ transform: 'translate3d(0, 0, 0)', offset: 0 }),
        animations.style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.1 }),
        animations.style({ transform: 'translate3d(10px, 0, 0)', offset: 0.2 }),
        animations.style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.3 }),
        animations.style({ transform: 'translate3d(10px, 0, 0)', offset: 0.4 }),
        animations.style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.5 }),
        animations.style({ transform: 'translate3d(10px, 0, 0)', offset: 0.6 }),
        animations.style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.7 }),
        animations.style({ transform: 'translate3d(10px, 0, 0)', offset: 0.8 }),
        animations.style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.9 }),
        animations.style({ transform: 'translate3d(0, 0, 0)', offset: 1 }),
    ])), { params: { timing: DEFAULT_TIMING, delay: 0 } });
    var /** @type {?} */ swing = animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
        animations.style({ transform: 'rotate3d(0, 0, 1, 15deg)', offset: 0.2 }),
        animations.style({ transform: 'rotate3d(0, 0, 1, -10deg)', offset: 0.4 }),
        animations.style({ transform: 'rotate3d(0, 0, 1, 5deg)', offset: 0.6 }),
        animations.style({ transform: 'rotate3d(0, 0, 1, -5deg)', offset: 0.8 }),
        animations.style({ transform: 'rotate3d(0, 0, 1, 0deg)', offset: 1 }),
    ])), { params: { timing: DEFAULT_TIMING, delay: 0 } });
    var /** @type {?} */ tada = animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
        animations.style({ transform: 'scale3d(1, 1, 1)', offset: 0 }),
        animations.style({
            transform: 'scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg)',
            offset: 0.1,
        }),
        animations.style({
            transform: 'scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg)',
            offset: 0.2,
        }),
        animations.style({
            transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)',
            offset: 0.3,
        }),
        animations.style({
            transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)',
            offset: 0.4,
        }),
        animations.style({
            transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)',
            offset: 0.5,
        }),
        animations.style({
            transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)',
            offset: 0.6,
        }),
        animations.style({
            transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)',
            offset: 0.7,
        }),
        animations.style({
            transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)',
            offset: 0.8,
        }),
        animations.style({
            transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)',
            offset: 0.9,
        }),
        animations.style({ transform: 'scale3d(1, 1, 1)', offset: 1 }),
    ])), { params: { timing: DEFAULT_TIMING, delay: 0 } });
    var /** @type {?} */ wobble = animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
        animations.style({ transform: 'none', offset: 0 }),
        animations.style({
            transform: 'translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg)',
            offset: 0.15,
        }),
        animations.style({
            transform: 'translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg)',
            offset: 0.3,
        }),
        animations.style({
            transform: 'translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg)',
            offset: 0.45,
        }),
        animations.style({
            transform: 'translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg)',
            offset: 0.6,
        }),
        animations.style({
            transform: 'translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg)',
            offset: 0.75,
        }),
        animations.style({ transform: 'none', offset: 1 }),
    ])), { params: { timing: DEFAULT_TIMING, delay: 0 } });
    var /** @type {?} */ jello = animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
        animations.style({ transform: 'none', offset: 0 }),
        animations.style({ transform: 'none', offset: 0.11 }),
        animations.style({ transform: 'skewX(-12.5deg) skewY(-12.5deg)', offset: 0.22 }),
        animations.style({ transform: 'skewX(6.25deg) skewY(6.25deg)', offset: 0.33 }),
        animations.style({ transform: 'skewX(-3.125deg) skewY(-3.125deg)', offset: 0.44 }),
        animations.style({ transform: 'skewX(1.5625deg) skewY(1.5625deg)', offset: 0.55 }),
        animations.style({
            transform: 'skewX(-0.78125deg) skewY(-0.78125deg)',
            offset: 0.66,
        }),
        animations.style({
            transform: 'skewX(0.390625deg) skewY(0.390625deg)',
            offset: 0.77,
        }),
        animations.style({
            transform: 'skewX(-0.1953125deg) skewY(-0.1953125deg)',
            offset: 0.88,
        }),
        animations.style({ transform: 'none', offset: 1 }),
    ])), { params: { timing: DEFAULT_TIMING, delay: 0 } });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ bounceIn = animations.animation(animations.animate('{{ timing }}s {{ delay }}s cubic-bezier(0.215, 0.610, 0.355, 1.000)', animations.keyframes([
        animations.style({ opacity: 0, transform: 'scale3d(.3, .3, .3)', offset: 0 }),
        animations.style({ transform: 'scale3d(1.1, 1.1, 1.1)', offset: 0.2 }),
        animations.style({ transform: 'scale3d(.9, .9, .9)', offset: 0.4 }),
        animations.style({
            opacity: 1,
            transform: 'scale3d(1.03, 1.03, 1.03)',
            offset: 0.6
        }),
        animations.style({ transform: 'scale3d(.97, .97, .97)', offset: 0.8 }),
        animations.style({ opacity: 1, transform: 'scale3d(1, 1, 1)', offset: 1 })
    ])), { params: { timing: DEFAULT_TIMING, delay: 0 } });
    /**
     * @param {?} a
     * @param {?} b
     * @param {?} c
     * @param {?} d
     * @return {?}
     */
    function bounceInY(a, b, c, d) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s cubic-bezier(0.215, 0.610, 0.355, 1.000)', animations.keyframes([
            animations.style({
                opacity: 0,
                transform: 'translate3d(0, {{ a }}, 0)',
                offset: 0
            }),
            animations.style({
                opacity: 1,
                transform: 'translate3d(0, {{ b }}, 0)',
                offset: 0.6
            }),
            animations.style({ transform: 'translate3d(0, {{ c }}, 0)', offset: 0.75 }),
            animations.style({ transform: 'translate3d(0, {{ d }}, 0)', offset: 0.9 }),
            animations.style({ opacity: 1, transform: 'none', offset: 1 })
        ])), {
            params: {
                timing: DEFAULT_TIMING,
                delay: 0,
                a: a,
                b: b,
                c: c,
                d: d
            }
        });
    }
    /**
     * @param {?} a
     * @param {?} b
     * @param {?} c
     * @param {?} d
     * @return {?}
     */
    function bounceInX(a, b, c, d) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s cubic-bezier(0.215, 0.610, 0.355, 1.000)', animations.keyframes([
            animations.style({
                opacity: 0,
                transform: 'translate3d({{ a }}, 0, 0)',
                offset: 0
            }),
            animations.style({
                opacity: 1,
                transform: 'translate3d({{ b }}, 0, 0)',
                offset: 0.6
            }),
            animations.style({ transform: 'translate3d({{ c }}, 0, 0)', offset: 0.75 }),
            animations.style({ transform: 'translate3d({{ d }}, 0, 0)', offset: 0.9 }),
            animations.style({ opacity: 1, transform: 'none', offset: 1 })
        ])), {
            params: {
                timing: DEFAULT_TIMING,
                delay: 0,
                a: a,
                b: b,
                c: c,
                d: d
            }
        });
    }
    var /** @type {?} */ bounceInDown = bounceInY('-3000px', '25px', '-10px', '5px');
    var /** @type {?} */ bounceInUp = bounceInY('3000px', '-25px', '10px', '-5px');
    var /** @type {?} */ bounceInLeft = bounceInX('-3000px', '25px', '-10px', '5px');
    var /** @type {?} */ bounceInRight = bounceInX('3000px', '-25px', '10px', '-5px');
    var /** @type {?} */ bounceOut = animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
        animations.style({ transform: 'scale3d(.9, .9, .9)', offset: 0.2 }),
        animations.style({
            opacity: 1,
            transform: 'scale3d({{ scale }}, {{ scale }}, {{ scale }})',
            offset: 0.5
        }),
        animations.style({
            opacity: 1,
            transform: 'scale3d({{ scale }}, {{ scale }}, {{ scale }})',
            offset: 0.55
        }),
        animations.style({ opacity: 0, transform: 'scale3d(.3, .3, .3)', offset: 1 })
    ])), { params: { timing: DEFAULT_TIMING, delay: 0, scale: 1.1 } });
    /**
     * @param {?} a
     * @param {?} b
     * @param {?} c
     * @param {?} d
     * @return {?}
     */
    function bounceOutY(a, b, c, d) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({ transform: 'translate3d(0, {{ a }}, 0)', offset: 0.2 }),
            animations.style({
                opacity: 1,
                transform: 'translate3d(0, {{ b }}, 0)',
                offset: 0.4
            }),
            animations.style({
                opacity: 1,
                transform: 'translate3d(0, {{ c }}, 0)',
                offset: 0.45
            }),
            animations.style({
                opacity: 0,
                transform: 'translate3d(0, {{ d }}, 0)',
                offset: 1
            })
        ])), {
            params: {
                timing: DEFAULT_TIMING,
                delay: 0,
                a: a,
                b: b,
                c: c,
                d: d
            }
        });
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function bounceOutX(a, b) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                opacity: 1,
                transform: 'translate3d({{ a }}, 0, 0)',
                offset: 0.2
            }),
            animations.style({
                opacity: 0,
                transform: 'translate3d({{ b }}, 0, 0)',
                offset: 1
            })
        ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
    }
    var /** @type {?} */ bounceOutDown = bounceOutY('10px', '-20px', '-20px', '2000px');
    var /** @type {?} */ bounceOutUp = bounceOutY('-10px', '20px', '20px', '-2000px');
    var /** @type {?} */ bounceOutLeft = bounceOutX('20px', '-2000px');
    var /** @type {?} */ bounceOutRight = bounceOutX('-20px', '2000px');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function fadeInX(a, b) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                opacity: 0,
                transform: 'translate3d({{ a }}, 0, 0)',
                offset: 0
            }),
            animations.style({
                opacity: 1,
                transform: 'translate3d({{ b }}, 0, 0)',
                offset: 1
            })
        ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function fadeInY(a, b) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                opacity: 0,
                transform: 'translate3d(0, {{ a }}, 0)',
                offset: 0
            }),
            animations.style({
                opacity: 1,
                transform: 'translate3d(0, {{ b }}, 0)',
                offset: 1
            })
        ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
    }
    var /** @type {?} */ fadeIn = fadeInX(0, 0);
    var /** @type {?} */ fadeInDown = fadeInY('-100%', 0);
    var /** @type {?} */ fadeInUp = fadeInY('100%', 0);
    var /** @type {?} */ fadeInLeft = fadeInX('-100%', 0);
    var /** @type {?} */ fadeInRight = fadeInX('100%', 0);
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function fadeOutX(a, b) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                opacity: 1,
                transform: 'translate3d({{ a }}, 0, 0)',
                offset: 0
            }),
            animations.style({
                opacity: 0,
                transform: 'translate3d({{ b }}, 0, 0)',
                offset: 1
            })
        ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function fadeOutY(a, b) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                opacity: 1,
                transform: 'translate3d(0, {{ a }}, 0)',
                offset: 0
            }),
            animations.style({
                opacity: 0,
                transform: 'translate3d(0, {{ b }}, 0)',
                offset: 1
            })
        ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
    }
    var /** @type {?} */ fadeOut = fadeOutX(0, 0);
    var /** @type {?} */ fadeOutDown = fadeOutY('-100%', 0);
    var /** @type {?} */ fadeOutUp = fadeOutY('100%', 0);
    var /** @type {?} */ fadeOutLeft = fadeOutX('-100%', 0);
    var /** @type {?} */ fadeOutRight = fadeOutX('100%', 0);
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function slideX(a, b) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                transform: 'translate3d({{ a }}, 0, 0)',
                offset: 0
            }),
            animations.style({
                transform: 'translate3d({{ b }}, 0, 0)',
                offset: 1
            })
        ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function slideY(a, b) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                transform: 'translate3d(0, {{ a }}, 0)',
                offset: 0
            }),
            animations.style({
                transform: 'translate3d(0, {{ b }}, 0)',
                offset: 1
            })
        ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
    }
    var /** @type {?} */ slideInUp = slideY('-100%', 0);
    var /** @type {?} */ slideInDown = slideY('100%', 0);
    var /** @type {?} */ slideInLeft = slideX('-100%', 0);
    var /** @type {?} */ slideInRight = slideX('100%', 0);
    var /** @type {?} */ slideOutUp = slideY(0, '-100%');
    var /** @type {?} */ slideOutDown = slideY(0, '100%');
    var /** @type {?} */ slideOutLeft = slideX(0, '-100%');
    var /** @type {?} */ slideOutRight = slideX(0, '100%');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ flip = animations.animation([
        animations.style({ 'backface-visibility': 'visible' }),
        animations.animate('{{ timing }}s {{ delay }}s ease-out', animations.keyframes([
            animations.style({
                transform: 'perspective(400px) rotate3d(0, 1, 0, -360deg)',
                offset: 0
            }),
            animations.style({
                transform: 'perspective(400px) scale3d(1.5, 1.5, 1.5) rotate3d(0, 1, 0, -190deg)',
                offset: 0.4
            }),
            animations.style({
                transform: 'perspective(400px) scale3d(1.5, 1.5, 1.5) rotate3d(0, 1, 0, -170deg)',
                offset: 0.5
            }),
            animations.style({
                transform: 'perspective(400px) scale3d(.95, .95, .95)',
                offset: 0.8
            }),
            animations.style({
                transform: 'perspective(400px)',
                offset: 1
            })
        ]))
    ], {
        params: { timing: DEFAULT_TIMING, delay: 0 }
    });
    /**
     * @param {?} rotateX
     * @param {?} rotateY
     * @return {?}
     */
    function flipIn(rotateX, rotateY) {
        return animations.animation([
            animations.style({ 'backface-visibility': 'visible' }),
            animations.animate('{{ timing }}s {{ delay }}s ease-in', animations.keyframes([
                animations.style({
                    opacity: 0,
                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',
                    offset: 0
                }),
                animations.style({
                    opacity: 1,
                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',
                    offset: 0.4
                }),
                animations.style({
                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',
                    offset: 0.6
                }),
                animations.style({
                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',
                    offset: 0.8
                }),
                animations.style({
                    transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',
                    offset: 1
                })
            ]))
        ], { params: { timing: DEFAULT_TIMING, delay: 0, rotateX: rotateX, rotateY: rotateY } });
    }
    var /** @type {?} */ flipInX = flipIn(1, 0);
    var /** @type {?} */ flipInY = flipIn(0, 1);
    /**
     * @param {?} rotateX
     * @param {?} rotateY
     * @return {?}
     */
    function flipOut(rotateX, rotateY) {
        return animations.animation([
            animations.style({ 'backface-visibility': 'visible' }),
            animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
                animations.style({
                    transform: 'perspective(400px)',
                    offset: 0
                }),
                animations.style({
                    opacity: 1,
                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',
                    offset: 0.3
                }),
                animations.style({
                    opacity: 0,
                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',
                    offset: 1
                })
            ]))
        ], { params: { timing: DEFAULT_TIMING, delay: 0, rotateX: rotateX, rotateY: rotateY } });
    }
    var /** @type {?} */ flipOutX = flipOut(1, 0);
    var /** @type {?} */ flipOutY = flipOut(0, 1);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ lightSpeedIn = animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
        animations.style({
            opacity: 0,
            transform: 'translate3d(100%, 0, 0) skewX(-30deg)',
            offset: 0,
        }),
        animations.style({
            opacity: 1,
            transform: 'translate3d(0, 0, 0) skewX(0)',
            offset: 1,
        }),
    ])), {
        params: { timing: DEFAULT_TIMING, delay: 0 },
    });
    var /** @type {?} */ lightSpeedOut = animations.animation(animations.animate('{{ timing }}s {{ delay }}s ease-out', animations.keyframes([
        animations.style({
            opacity: 1,
            offset: 0,
        }),
        animations.style({
            opacity: 0,
            transform: 'translate3d(100%, 0, 0) skewX(30deg)',
            offset: 1,
        }),
    ])), {
        params: { timing: DEFAULT_TIMING, delay: 0 },
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} origin
     * @param {?} degrees
     * @return {?}
     */
    function rotateInDirection(origin, degrees) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                'transform-origin': '{{ origin }}',
                opacity: 0,
                transform: 'rotate3d(0, 0, 1, {{ degrees }})',
                offset: 0
            }),
            animations.style({
                'transform-origin': '{{ origin }}',
                opacity: 1,
                transform: 'none',
                offset: 1
            })
        ])), {
            params: { timing: DEFAULT_TIMING, delay: 0, origin: origin, degrees: degrees }
        });
    }
    var /** @type {?} */ rotateIn = rotateInDirection('center', '-200deg');
    var /** @type {?} */ rotateInDownLeft = rotateInDirection('left bottom', '-45deg');
    var /** @type {?} */ rotateInDownRight = rotateInDirection('right bottom', '45deg');
    var /** @type {?} */ rotateInUpLeft = rotateInDirection('left bottom', '45deg');
    var /** @type {?} */ rotateInUpRight = rotateInDirection('right bottom', '-90deg');
    /**
     * @param {?} origin
     * @param {?} degrees
     * @return {?}
     */
    function rotateOutDirection(origin, degrees) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                'transform-origin': '{{ origin }}',
                opacity: 1,
                transform: 'none',
                offset: 0
            }),
            animations.style({
                'transform-origin': '{{ origin }}',
                opacity: 0,
                transform: 'rotate3d(0, 0, 1, {{ degrees }})',
                offset: 1
            })
        ])), {
            params: { timing: DEFAULT_TIMING, delay: 0, origin: origin, degrees: degrees }
        });
    }
    var /** @type {?} */ rotateOut = rotateOutDirection('center', '200deg');
    var /** @type {?} */ rotateOutDownLeft = rotateOutDirection('left bottom', '45deg');
    var /** @type {?} */ rotateOutDownRight = rotateOutDirection('right bottom', '-45deg');
    var /** @type {?} */ rotateOutUpLeft = rotateOutDirection('left bottom', '-45deg');
    var /** @type {?} */ rotateOutUpRight = rotateOutDirection('right bottom', '90deg');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ hinge = animations.animation([
        animations.style({ 'transform-origin': 'top left' }),
        animations.animate('{{ timing }}s {{ delay }}s ease-in-out', animations.keyframes([
            animations.style({
                transform: 'rotate3d(0, 0, 1, 80deg)',
                offset: 0.2,
            }),
            animations.style({
                transform: 'rotate3d(0, 0, 1, 60deg)',
                offset: 0.4,
            }),
            animations.style({
                transform: 'rotate3d(0, 0, 1, 80deg)',
                offset: 0.6,
            }),
            animations.style({
                opacity: 1,
                transform: 'rotate3d(0, 0, 1, 60deg)',
                offset: 0.8,
            }),
            animations.style({
                opacity: 0,
                transform: 'translate3d(0, 700px, 0)',
                offset: 1,
            }),
        ])),
    ], {
        params: { timing: DEFAULT_TIMING, delay: 0 },
    });
    var /** @type {?} */ jackInTheBox = animations.animation([
        animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                opacity: 0,
                transform: 'scale(0.1) rotate(30deg)',
                'transform-origin': 'center bottom',
                offset: 0,
            }),
            animations.style({
                opacity: 0.5,
                transform: 'rotate(-10deg)',
                offset: 0.5,
            }),
            animations.style({
                opacity: 0.7,
                transform: 'rotate(3deg)',
                offset: 0.7,
            }),
            animations.style({
                opacity: 1,
                transform: 'scale(1)',
                offset: 1,
            }),
        ])),
    ], {
        params: { timing: DEFAULT_TIMING, delay: 0 },
    });
    var /** @type {?} */ rollIn = animations.animation([
        animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                opacity: 0,
                transform: 'translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg)',
                offset: 0,
            }),
            animations.style({
                opacity: 1,
                transform: 'none',
                offset: 1,
            }),
        ])),
    ], {
        params: { timing: DEFAULT_TIMING, delay: 0 },
    });
    var /** @type {?} */ rollOut = animations.animation([
        animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                opacity: 1,
                offset: 0,
            }),
            animations.style({
                opacity: 0,
                transform: 'translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg)',
                offset: 1,
            }),
        ])),
    ], {
        params: { timing: DEFAULT_TIMING, delay: 0 },
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ zoomIn = animations.animation([
        animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                opacity: 0,
                transform: 'scale3d(.3, .3, .3)',
                offset: 0
            }),
            animations.style({
                opacity: 1,
                transform: 'scale3d(1, 1, 1)',
                offset: 0.5
            })
        ]))
    ], {
        params: { timing: DEFAULT_TIMING, delay: 0 }
    });
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function zoomInY(a, b) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s cubic-bezier(0.550, 0.055, 0.675, 0.190)', animations.keyframes([
            animations.style({
                opacity: 0,
                transform: "scale3d(.1, .1, .1) translate3d(0, {{ a }}, 0)",
                offset: 0
            }),
            animations.style({
                opacity: 1,
                transform: "scale3d(.475, .475, .475) translate3d(0, {{ b }}, 0)",
                offset: 0.6
            })
        ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function zoomInX(a, b) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s cubic-bezier(0.550, 0.055, 0.675, 0.190)', animations.keyframes([
            animations.style({
                opacity: 0,
                transform: "scale3d(.1, .1, .1) translate3d({{ a }}, 0, 0)",
                offset: 0
            }),
            animations.style({
                opacity: 1,
                transform: "scale3d(.475, .475, .475) translate3d({{ b }}, 0, 0)",
                offset: 0.6
            })
        ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
    }
    var /** @type {?} */ zoomInDown = zoomInY('-1000px', '10px');
    var /** @type {?} */ zoomInUp = zoomInY('1000px', '-10px');
    var /** @type {?} */ zoomInLeft = zoomInX('-1000px', '10px');
    var /** @type {?} */ zoomInRight = zoomInX('1000px', '-10px');
    var /** @type {?} */ zoomOut = animations.animation([
        animations.animate('{{ timing }}s {{ delay }}s', animations.keyframes([
            animations.style({
                opacity: 1,
                offset: 0
            }),
            animations.style({
                opacity: 0,
                transform: 'scale3d(.3, .3, .3)',
                offset: 0.5
            }),
            animations.style({
                opacity: 0,
                offset: 1
            })
        ]))
    ], {
        params: { timing: DEFAULT_TIMING, delay: 0 }
    });
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function zoomOutY(a, b) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s cubic-bezier(0.550, 0.055, 0.675, 0.190)', animations.keyframes([
            animations.style({
                opacity: 1,
                transform: "scale3d(.475, .475, .475) translate3d(0, {{ a }}, 0)",
                offset: 0.4
            }),
            animations.style({
                opacity: 0,
                transform: "scale3d(.1, .1, .1) translate3d(0, {{ b }}, 0)",
                offset: 1
            })
        ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function zoomOutX(a, b) {
        return animations.animation(animations.animate('{{ timing }}s {{ delay }}s cubic-bezier(0.550, 0.055, 0.675, 0.190)', animations.keyframes([
            animations.style({
                opacity: 1,
                transform: "scale3d(.475, .475, .475) translate3d({{ a }}, 0, 0)",
                offset: 0.4
            }),
            animations.style({
                opacity: 0,
                transform: "scale3d(.1, .1, .1) translate3d({{ b }}, 0, 0)",
                offset: 1
            })
        ])), { params: { timing: DEFAULT_TIMING, delay: 0, a: a, b: b } });
    }
    var /** @type {?} */ zoomOutDown = zoomOutY('-60px', '2000px');
    var /** @type {?} */ zoomOutUp = zoomOutY('60px', '-2000px');
    var /** @type {?} */ zoomOutLeft = zoomOutX('42px', '-2000px');
    var /** @type {?} */ zoomOutRight = zoomOutX('-42px', '2000px');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.bounce = bounce;
    exports.flash = flash;
    exports.pulse = pulse;
    exports.rubberBand = rubberBand;
    exports.shake = shake;
    exports.swing = swing;
    exports.tada = tada;
    exports.wobble = wobble;
    exports.jello = jello;
    exports.bounceIn = bounceIn;
    exports.bounceInY = bounceInY;
    exports.bounceInX = bounceInX;
    exports.bounceInDown = bounceInDown;
    exports.bounceInUp = bounceInUp;
    exports.bounceInLeft = bounceInLeft;
    exports.bounceInRight = bounceInRight;
    exports.bounceOut = bounceOut;
    exports.bounceOutY = bounceOutY;
    exports.bounceOutX = bounceOutX;
    exports.bounceOutDown = bounceOutDown;
    exports.bounceOutUp = bounceOutUp;
    exports.bounceOutLeft = bounceOutLeft;
    exports.bounceOutRight = bounceOutRight;
    exports.fadeInX = fadeInX;
    exports.fadeInY = fadeInY;
    exports.fadeIn = fadeIn;
    exports.fadeInDown = fadeInDown;
    exports.fadeInUp = fadeInUp;
    exports.fadeInLeft = fadeInLeft;
    exports.fadeInRight = fadeInRight;
    exports.fadeOutX = fadeOutX;
    exports.fadeOutY = fadeOutY;
    exports.fadeOut = fadeOut;
    exports.fadeOutDown = fadeOutDown;
    exports.fadeOutUp = fadeOutUp;
    exports.fadeOutLeft = fadeOutLeft;
    exports.fadeOutRight = fadeOutRight;
    exports.slideX = slideX;
    exports.slideY = slideY;
    exports.slideInUp = slideInUp;
    exports.slideInDown = slideInDown;
    exports.slideInLeft = slideInLeft;
    exports.slideInRight = slideInRight;
    exports.slideOutUp = slideOutUp;
    exports.slideOutDown = slideOutDown;
    exports.slideOutLeft = slideOutLeft;
    exports.slideOutRight = slideOutRight;
    exports.flip = flip;
    exports.flipIn = flipIn;
    exports.flipInX = flipInX;
    exports.flipInY = flipInY;
    exports.flipOut = flipOut;
    exports.flipOutX = flipOutX;
    exports.flipOutY = flipOutY;
    exports.lightSpeedIn = lightSpeedIn;
    exports.lightSpeedOut = lightSpeedOut;
    exports.rotateInDirection = rotateInDirection;
    exports.rotateIn = rotateIn;
    exports.rotateInDownLeft = rotateInDownLeft;
    exports.rotateInDownRight = rotateInDownRight;
    exports.rotateInUpLeft = rotateInUpLeft;
    exports.rotateInUpRight = rotateInUpRight;
    exports.rotateOutDirection = rotateOutDirection;
    exports.rotateOut = rotateOut;
    exports.rotateOutDownLeft = rotateOutDownLeft;
    exports.rotateOutDownRight = rotateOutDownRight;
    exports.rotateOutUpLeft = rotateOutUpLeft;
    exports.rotateOutUpRight = rotateOutUpRight;
    exports.hinge = hinge;
    exports.jackInTheBox = jackInTheBox;
    exports.rollIn = rollIn;
    exports.rollOut = rollOut;
    exports.zoomIn = zoomIn;
    exports.zoomInY = zoomInY;
    exports.zoomInX = zoomInX;
    exports.zoomInDown = zoomInDown;
    exports.zoomInUp = zoomInUp;
    exports.zoomInLeft = zoomInLeft;
    exports.zoomInRight = zoomInRight;
    exports.zoomOut = zoomOut;
    exports.zoomOutY = zoomOutY;
    exports.zoomOutX = zoomOutX;
    exports.zoomOutDown = zoomOutDown;
    exports.zoomOutUp = zoomOutUp;
    exports.zoomOutLeft = zoomOutLeft;
    exports.zoomOutRight = zoomOutRight;
    exports.ɵa = DEFAULT_TIMING;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,